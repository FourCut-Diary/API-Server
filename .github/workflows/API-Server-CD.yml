name: Deploy to Production Instance

on:
  push:
    branches: [ main ]

env:
  SPRING_PROFILES_ACTIVE: prod
  ECR_HOST: ${{ secrets.ECR_HOST }}
  ECR_API_NAME: ${{ secrets.ECR_API_NAME }}
  ECR_NOTIFICATION_NAME: ${{ secrets.ECR_NOTIFICATION_NAME }}
  ECR_API_REPO: ${{ secrets.ECR_HOST }}/${{ secrets.ECR_API_NAME }}
  ECR_NOTIFICATION_REPO: ${{ secrets.ECR_HOST }}/${{ secrets.ECR_NOTIFICATION_NAME }}

jobs:
  build:
    name: CD Pipeline
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 1.17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: 'Check Java Version'
        run: |
          java --version

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: 'Get application.yml from AWS S3'
        run: |
          # module-api용 application.yml 다운로드
          aws s3 cp \
            --region ap-northeast-2 \
            s3://diary-storage/prod/application-prod.yml \
            module-api/src/main/resources/application.yml
      
          # module-notification용 application.yml 다운로드
          aws s3 cp \
            --region ap-northeast-2 \
            s3://diary-storage/prod/application-prod.yml \
            module-notification/src/main/resources/application.yml

      - name: 'Build with Gradle'
        run: |
          chmod +x ./gradlew
          ./gradlew clean build
        shell: bash

      - name: 'Login to ECR'
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_HOST

      - name: Docker Image Build & Push - API
        run: |
          docker build -t $ECR_API_NAME -f Dockerfile.api .
          docker tag $ECR_API_NAME:latest $ECR_API_REPO
          docker push $ECR_API_REPO

      - name: Docker Image Build & Push - Notification
        run: |
          docker build -t $ECR_NOTIFICATION_NAME -f Dockerfile.notification .
          docker tag $ECR_NOTIFICATION_NAME:latest $ECR_NOTIFICATION_REPO
          docker push $ECR_NOTIFICATION_REPO

      - name: 'Send docker-compose.yml to EC2 Instance'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_RELEASE_SERVER_IP }}
          username: ${{ secrets.RELEASE_SERVER_USER }}
          key: ${{ secrets.PROD_RELEASE_SERVER_KEY }}
          source: "./docker-compose.yml"
          target: "/home/ec2-user/fourcut-diary/"

      - name: 'Send deploy script to EC2 Instance'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_RELEASE_SERVER_IP }}
          username: ${{ secrets.RELEASE_SERVER_USER }}
          key: ${{ secrets.PROD_RELEASE_SERVER_KEY }}
          source: "./scripts/"
          target: "/home/ec2-user/fourcut-diary/"

      - name: 'Get current time'
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Docker Container Run on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_RELEASE_SERVER_IP }}
          username: ${{ secrets.RELEASE_SERVER_USER }}
          key: ${{ secrets.PROD_RELEASE_SERVER_KEY }}
          script: |
            cd ~/fourcut-diary
            sudo docker pull $ECR_API_REPO
            sudo docker pull $ECR_NOTIFICATION_REPO
            sudo chmod +x ./scripts/*.sh
            ./scripts/deploy-api.sh
            ./scripts/deploy-notification.sh
            docker image prune -f
